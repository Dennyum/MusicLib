{"version":3,"sources":["util/Sportify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/PlayList.js","components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","e","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","PlayList","handleNameChange","newPlaylistName","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessURL","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlayList","trackUris","length","userID","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","savePlaylist","find","savedTrack","push","filter","currentTrack","trackURIS","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.03ab7612.chunk.js","sourcesContent":["const clientID = '928232fecb6b4188ac5b9072cb2ec149'\r\nconst redirectURI = 'http://FernandoPereira.surge.sh'\r\n\r\nlet accessToken ;\r\n\r\nconst Spotify = {\r\n    getAccessToken(){\r\n        if(accessToken){\r\n            return accessToken\r\n        }\r\n\r\n        // Chek fot acces token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if(accessTokenMatch && expiresInMatch){\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n\r\n            // Clear aprameter and grab another access token when it expire\r\n            window.setTimeout(() => accessToken = '',expiresIn* 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        }else{\r\n            const accessURL = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\r\n            window.location = accessURL;\r\n        }\r\n    },\r\n    search(term){\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,{\r\n            headers:{\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => {\r\n            return response.json()\r\n        }).then(jsonResponse => {\r\n            if(!jsonResponse){\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri\r\n            }));\r\n        });\r\n    },\r\n\r\n    savePlayList(name, trackUris){\r\n         if(!name || !trackUris.length){\r\n             return\r\n         }\r\n         const accessToken = Spotify.getAccessToken();\r\n         const headers = { Authorization : `Bearer ${accessToken}`};\r\n         let userID;\r\n\r\n         return fetch('https://api.spotify.com/v1/me',{headers: headers}\r\n         ).then(response => response.json()\r\n         ).then(jsonResponse => {\r\n             userID = jsonResponse.id;\r\n             return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,{\r\n                 headers:headers,\r\n                 method: 'POST',\r\n                 body: JSON.stringify({name:name})\r\n             }).then(response => response.json()\r\n             ).then(jsonResponse => {\r\n                 const playlistId = jsonResponse.id;\r\n                 return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistId}/tracks`,{\r\n                     headers:headers,\r\n                     method: 'POST',\r\n                     body: JSON.stringify({uris:trackUris})\r\n                 })\r\n             })\r\n         })\r\n\r\n    }\r\n}\r\n\r\nexport default Spotify;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport './SearchBar.css';\r\n\r\n\r\nclass SearchBar extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            term: \"\"\r\n        };\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search(){\r\n        this.props.onSearch(this.state.term)\r\n    }\r\n\r\n    handleTermChange(e){\r\n        this.setState({term: e.target.value})\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input onChange={this.handleTermChange} placeholder=\"Enter a Song, Album or Artist..\" />\r\n                <button onClick={this.search} className=\"SearchButton\">SEARCH</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react'\r\nimport './Track.css'\r\n\r\nclass Track extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack=this.removeTrack.bind(this);\r\n    }\r\n\r\n    renderAction(){\r\n        if(this.props.isRemoval){\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        }else{\r\n            return <button className=\"Track-action\" onClick={this.addTrack} >+</button>\r\n        }\r\n    }\r\n\r\n    addTrack(){\r\n        this.props.onAdd(this.props.track)\r\n    }\r\n\r\n    removeTrack(){\r\n        this.props.onRemove(this.props.track)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react'\r\nimport './TrackList.css'\r\nimport Track from '../Track/Track'\r\n\r\nclass TrackList extends React.Component{\r\n    render(){\r\n        return (\r\n            \r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        return <Track isRemoval={this.props.isRemoval} \r\n                                      onRemove={this.props.onRemove} \r\n                                      onAdd={this.props.onAdd} \r\n                                      track={track} \r\n                                      key={track.id} />\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from 'react'\r\nimport TrackList from '../TrackList/TrackList'\r\nimport './SearchResults.css'\r\n\r\nclass SearchResults extends React.Component{\r\n    render(){\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react'\r\nimport TrackList from '../TrackList/TrackList'\r\nimport './PlayList.css'\r\n\r\nclass PlayList extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.handleNameChange=this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(e){\r\n        let newPlaylistName = e.target.value;\r\n        this.props.onNameChange(newPlaylistName)\r\n    }\r\n    \r\n\r\n    render(){\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input onChange={this.handleNameChange} defaultValue={\"New Playlist\"}/>\r\n                <TrackList onRemove={this.props.onRemove} \r\n                           tracks={this.props.playlistTracks} \r\n                           isRemoval={true}/>\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave} >SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PlayList;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar'\nimport SearchResults from '../SearchResults/SearchResults'\nimport PlayList from '../Playlist/PlayList'\nimport Spotify from '../../util/Sportify'\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName:\"\",\n      playlistTracks:[]\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName=this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search=this.search.bind(this);\n  }\n\n  addTrack(track){\n    let tracks = this.state.playlistTracks;\n    if(tracks.find(savedTrack => savedTrack.id === track.id)){\n      return;\n    }\n    tracks.push(track);\n    this.setState({playlistTracks : tracks});\n  }\n\n  removeTrack(track){\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({playlistTracks: tracks});\n  }\n\n  updatePlaylistName(name){\n    this.setState({playlistName:name});\n  }\n\n  savePlaylist(){\n    const trackURIS = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlayList(this.state.playlistName, trackURIS ).then(() => {\n      this.setState({\n        playlistName: \"New Playlist\",\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term){\n    Spotify.search(term).then(searchResults => {\n      this.setState({\n        searchResults: searchResults\n      })\n    })\n  }\n\n\n  render(){\n    return (\n      <div>\n          <h1>Mu<span className=\"highlight\">sic</span>Lib</h1>\n          <div className=\"App\">\n              <SearchBar onSearch={this.search} />\n              <div className=\"App-playlist\">\n                <SearchResults  onAdd={this.addTrack} \n                                searchResults={this.state.searchResults}/>\n                <PlayList onRemove={this.removeTrack} \n                          playlistName={this.state.playlistName} \n                          playlistTracks={this.state.playlistTracks}\n                          onNameChange={this.updatePlaylistName}\n                          onSave={this.savePlaylist} />\n            </div>\n          </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}